/*
 * This file is generated by jOOQ.
 */
package com.hexarchbootdemo.adapter.output.persistence.h2.generated_sources.jooq.tables;


import com.hexarchbootdemo.adapter.output.persistence.h2.generated_sources.jooq.DefaultSchema;
import com.hexarchbootdemo.adapter.output.persistence.h2.generated_sources.jooq.Indexes;
import com.hexarchbootdemo.adapter.output.persistence.h2.generated_sources.jooq.Keys;
import com.hexarchbootdemo.adapter.output.persistence.h2.generated_sources.jooq.tables.records.VoterRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Voter extends TableImpl<VoterRecord> {

    private static final long serialVersionUID = -1111007655;

    /**
     * The reference instance of <code>VOTER</code>
     */
    public static final Voter VOTER = new Voter();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VoterRecord> getRecordType() {
        return VoterRecord.class;
    }

    /**
     * The column <code>VOTER.ID</code>.
     */
    public final TableField<VoterRecord, UUID> ID = createField(DSL.name("ID"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>VOTER.FIRST_NAME</code>.
     */
    public final TableField<VoterRecord, String> FIRST_NAME = createField(DSL.name("FIRST_NAME"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>VOTER.LAST_NAME</code>.
     */
    public final TableField<VoterRecord, String> LAST_NAME = createField(DSL.name("LAST_NAME"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>VOTER.SOCIAL_SECURITY_NUMBER</code>.
     */
    public final TableField<VoterRecord, String> SOCIAL_SECURITY_NUMBER = createField(DSL.name("SOCIAL_SECURITY_NUMBER"), org.jooq.impl.SQLDataType.VARCHAR(11).nullable(false), this, "");

    /**
     * Create a <code>VOTER</code> table reference
     */
    public Voter() {
        this(DSL.name("VOTER"), null);
    }

    /**
     * Create an aliased <code>VOTER</code> table reference
     */
    public Voter(String alias) {
        this(DSL.name(alias), VOTER);
    }

    /**
     * Create an aliased <code>VOTER</code> table reference
     */
    public Voter(Name alias) {
        this(alias, VOTER);
    }

    private Voter(Name alias, Table<VoterRecord> aliased) {
        this(alias, aliased, null);
    }

    private Voter(Name alias, Table<VoterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Voter(Table<O> child, ForeignKey<O, VoterRecord> key) {
        super(child, key, VOTER);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_4);
    }

    @Override
    public UniqueKey<VoterRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_4;
    }

    @Override
    public List<UniqueKey<VoterRecord>> getKeys() {
        return Arrays.<UniqueKey<VoterRecord>>asList(Keys.CONSTRAINT_4);
    }

    @Override
    public Voter as(String alias) {
        return new Voter(DSL.name(alias), this);
    }

    @Override
    public Voter as(Name alias) {
        return new Voter(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Voter rename(String name) {
        return new Voter(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Voter rename(Name name) {
        return new Voter(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
